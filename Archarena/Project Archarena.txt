Often people want to make a Minecraft clone at some point. It's pretty hard, though because voxels take a lot of system resources and are hard to make performant. If I were to do it, my goal would be to make a more technical type of game. Using Minecraft jargon, you could say a more redstone contraption based version. I see a lot of potential that Minecraft could have, including more immersive educational content, but can't because either the development team or the community have to preserve what is familiar, or it'd be too great a technical challenge within the already set constraints of the current game. So it makes sense to just make a new game altogether, and this new version will hopefully will be open source and modular. I'll explain the modular part later, but let me tell some improvements that could be made.

__Blocks of different sizes__
Firstly, one of the most fundamental changes is to have the varying grid size for the voxels. In Minecraft any terrain object and even static entities can only occupy a single 1 meter wide block space. In the proposed version, several object can occupy the same space, depending on their size or which grid resolution they use. To enable this, I believe we could take the approach taken by Cube 2: Sauerbraten, where the terrain is a marching cubes algorithm  with a minimum grid size but when adding or subtracting voxels, groups of these voxels are affected as to emulate larger grid sizes. I imagine 3 sizes to be enough: 0.2M, 0.4M ans 0.8M block sizes. This opens up the possibility of constructions with more resolution and more creative ways of doing them. This will also get rid of need to explicitly have specialized block shapes like stairs and slabs. The player can just combine fractions of a big block to do those shapes. When it comes to the "mining" aspect (terrain subtraction) it also opens up the possibility for different tools to have different outcomes on the same materials. For example, a chisel carves the smaller block sizes and small rocks can craft cobblestone, for example, but you'd use a saw or jackhammer to carve larger rock blocks, resulting in a higher mine rate as well as smooth stone that can be used in nice building construction.

__Entities as part of the terrain__
Given that we have Marching Cubes generating the terrain, it makes it possible to have arbritary shapes on the terrain. For aesthetic and style consistency reasons, you'd have the earth still be blocky as in regular Minecraft, but non-terrain entities (which have varying geometries) could be integrated in the terrain mesh and possibly benefit from the optimization algorithms of the regular terrain.
If you think of the logical implications, you may understand what I mean with making this Voxel engine modular. It'd be really cool if the voxel engine were used standalone from the Minecraft mechanics and gameplay, to be useful as a plug-in 3D level editor that rivals Constructive Solid Geometry in the Godot Engine.
To finish, I should mention that this feature is speculative and in trying to implement it we might find out there isn't a reasonable benefit to doing this.

__Think of Generic Materials, not Block Forms__
Adding a new type of block to Minecraft is a big hassle because people think in terms of the material that block is made of. Imagine we add a Gabbro block. It's much like the Stone block, so people expect it to behave much like the same. You'll have to also add Gabbro Stairs or Gabbro Walls. I propose a new paradigm where you have a set number of template shapes that any material can be in. What the dev has to do is create a new material class which specifies flags for which of these forms it can be in. Automatically recognizes to be possible to generate stair or wall versions of that material. Given that we are using Marching Cubes, it also comes handy that you can reuse the same geometry data set for many different game entities, instead of having redundant code. The dataset would hold recipes for these different shapes, so unless the material class explicits otherwise, the dev doesn't have to bother with specifying the obvious crafting rules for standard forms/shapes/types. In some Minecraft mods there's smelting and casting mechanics, where some blocks are inputted into a contraption that then transforms them into other shapes of the same material. The proposed feature would make it possible to not have to code the allowed recipes in the smelting contraption. If a material has the flags for a certain shape, they automatically can be cast into that shape.
The types of standard Forms I'd like to see implemented are the following:
> - "yardstick",  # for debugging
> - "dropped",  # as an hovering icon or billboard sprite
> - "fabric",  # a bidimentional soft body or non-colliding entity
> - "wire",  # an unidimentional line following a parabola or bezier curve path between two points
> - "powder",  # something like redstone, can be decal on other blocks
> - "fluid",  # it spreads around the terrain
> - "block",  # a 0.8 units wide cube
> - "notch",  # a 0.4 units wide cube
> - "nook",  # a 0.2 units wide cube
> - "slab",  # a 0.8x0.8x0.4 parallelopiped
> - "panel",  # a 0.8x0.8x0.2 parallelopiped
> - "sheet",  # a 0.8x0.8x0.1 parallelopiped
> - "facade",  # a 0.8x0.8x0.4 parallelopiped with a hole that can conceal other types
> - "frame",  # a 0.8x0.8x0.2 parallelopiped with a hole that can conceal other types
> - "pillar",  # a 0.8x0.4x0.4 parallelopiped
> - "post",  # a 0.8x0.2x0.2 parallelopiped
> - "stick",  # a 0.8x0.1x0.1 parallelopiped
> - "plank",  # a 0.8x0.2x0.2 parallelopiped
> - "brick",  # a 0.4x0.2x0.2 parallelopiped
> - "plate",  # a 0.4x0.4x0.2 parallelopiped

__PID Creatures__
One innovative feature that would make this game stand out is to have animals or other creatures that are procedurally animated. Instead of having canned animations, each skeleton joint will be affected by gravity and impact and corrects its position to stand up, walk and adapt to the geometry of the terrain. This might be really challanging to implement, but it isn't something new in videogames. Of course, this feature might too turn out unfeasible to implement unless a big team works on it.

__Genetic Algorithms and Offline Ecosystem Simulation__
Creatures in Minecraft are in general pretty basic. Outside some simplistic exceptions, their population is static, they won't feed by themselves, they won't expand territory and don't even have to adapt to predation as even predators are friendly. On other hand, there's the dubbed A-Life System in the STALKER series of games. Which despite being of dubbious benefit in those games, it's an intriguing idea. Animals and other characters can migrate, they'll avoid predators or follow prey, they settle on places with resources and move upon the depletion of those resources and their populations work in a way to adapt to the interactions between different species. These behaviours can even be computed beyond the render distance of the player, in a global way using approximations. Maybe if the player moves out of an area depleted in wildlife, the offline algorithm is made in such way that rebalances the ecosystem in that area.
Maybe this feature is kinda idealistic, but a lot of interesting ideas can be taken from it as to improve gameplay. For example, animals that feed and reproduce by themselves enable the player to automate sheparding.
With this said, you could insinuate that one would use genetic algorithms to diversify the populations of species, but maybe that's too much to implement in a game and make work properly. One way I see it'd be interesting to implement a genetic algorithm would be in plants, as away to procedurally generate branches or other growth patterns. I can imagine it'd be satisfying for players to have a sort of prunning mechanic in trees and some other plants. The plant generates a set of branches with random properties and the player removes branches of undesired properties. The remaining branches generate more buds with inherited properties.

_Geologically plausible formations and resource distributions_
This is something I think Minecraft misses the mark a lot. If natural formations, ores and the types of rocks generated in clusters with related rocks, as happens in nature, Minecraft could add a lot of educational value. In Minecraft the resources generate pretty even and randomly, make it just a game of chance to look for resources. It'd be more engaging if the player was able to prospect for these resources. For example gold is often found on riversides and granite around volcanoes. The different kinds of rocks could also be found in geological layers and rare materials in meteor craters.
There's also potential for environmental storytelling here, and everyone loves that.

__Evolving Biomes__
In the same vein of ecosystem and geological simulation, I believe it'd be a fun enterprise for the player to try changing the biomes types in a region by changing introducing the vegetation and wildlife from other regions or by adding or depleting different kind of resources. This could also happen naturally, from the migration of the biosphere or catastrophic events like wildfires, alien contact or volcanic eruptions. Maybe the environment around the player's settlement could also be affected by the development of technology, producing of waste materials and depletion of resources. Something that would have to be counteracted by the player. Hopefully the game would feel much more dynamic and give a stronger sense of purpose in the actions of the player.

__Archeological Exploration__
Minecraft already has some structures that generate naturally like desert temples and abandoned mineshafts. But these are very boring and small. I wish there was a wider variety of structures and which are much more complex. Some of them could have collectibilty value like underground fossils of various species of creatures. Others could incentivise exploration like huge pyramids with mazes and traps inside. Others could convey some basic storytelling, in the same stream as the prospection and tracking idea, for example, the player may find crop circles one day, and by following clues, be lead to a UFO crash site. Maybe there's evidence of former civilization and monuments are scattered around, possessing various contraptions and ready-made infrastructure. Finding these structures allows the player to learn lore about the game world.

__Economy and Civilization System__
Along with evolving biomes, the game could be made more fun by adding more managment aspects to it. Villagers could use a real finite or resource-based currency and bartering. They could also be more capable in resource exploitation. Minecraft has a network of parallel resource supply chains. There's contraption crafting, shelter building, mining, farming, shepherding, exploration, ect. It should possible for the players to be able to focus on a single kind of industry without worrying that resources of a neglected industry run out. The answer to this is for villagers to have an organized civilization and infrastructure. In other words, the Villagers should be able to provide resources in trade for the products the player chooses to work on. The player could also be able to build villages or towns equipped with necessary gear that incentivises the Villagers to produce something specific, which then is collected as tax by the player.

**######**

There's a lot of other ideas I'd try to implement if I had the skill or the team. A lot could be learned from established mods in the Minecraft community and maybe more could be learned by asking respected modders for their visions too. But this proposal keeps it simple with just the big fundamental features. In a sense, it's a vertical slice of my priorities for my version of Minecraft. Hopefully it'd perform well enough to run along other programs in the same computer and be easily moddable without 3rd party addons. Maybe these standards could be easily met by using the Godot Engine Editor as the tool for making mods.
